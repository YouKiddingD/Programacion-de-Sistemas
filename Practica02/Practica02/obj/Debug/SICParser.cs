//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a_k_n\Documents\Programas\Programacion de sistemas\Practica02\Practica02\SIC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Practica02 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SICParser : Parser {
	public const int
		INIT=1, ACABA=2, DIRBYTE=3, OPERANDBYTE=4, DIRECTIVA=5, EXEP=6, INSTRUCCION=7, 
		OPERANDO=8, ETIQUETA=9, ENTER=10, WS=11;
	public const int
		RULE_inicio = 0, RULE_fin = 1, RULE_expr = 2, RULE_checarOpbyte = 3, RULE_checarByte = 4, 
		RULE_checarRsub = 5, RULE_checarOp = 6, RULE_checarDirec = 7, RULE_checarEtiq = 8, 
		RULE_checarInstru = 9, RULE_compileUnit = 10;
	public static readonly string[] ruleNames = {
		"inicio", "fin", "expr", "checarOpbyte", "checarByte", "checarRsub", "checarOp", 
		"checarDirec", "checarEtiq", "checarInstru", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INIT", "ACABA", "DIRBYTE", "OPERANDBYTE", "DIRECTIVA", "EXEP", 
		"INSTRUCCION", "OPERANDO", "ETIQUETA", "ENTER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SICParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InicioContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ITerminalNode INIT() { return GetToken(SICParser.INIT, 0); }
		public ChecarOpContext checarOp() {
			return GetRuleContext<ChecarOpContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; checarEtiq();
			State = 23; Match(INIT);
			State = 24; checarOp();
			State = 25; Match(ENTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ITerminalNode ACABA() { return GetToken(SICParser.ACABA, 0); }
		public ChecarOpContext checarOp() {
			return GetRuleContext<ChecarOpContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_fin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; checarEtiq();
			State = 28; Match(ACABA);
			State = 29; checarOp();
			State = 30; Match(ENTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public bool val;
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarInstruContext checarInstru() {
			return GetRuleContext<ChecarInstruContext>(0);
		}
		public ChecarOpContext checarOp() {
			return GetRuleContext<ChecarOpContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public ChecarRsubContext checarRsub() {
			return GetRuleContext<ChecarRsubContext>(0);
		}
		public ChecarDirecContext checarDirec() {
			return GetRuleContext<ChecarDirecContext>(0);
		}
		public ChecarByteContext checarByte() {
			return GetRuleContext<ChecarByteContext>(0);
		}
		public ChecarOpbyteContext checarOpbyte() {
			return GetRuleContext<ChecarOpbyteContext>(0);
		}
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_expr);
		try {
			State = 53;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; checarEtiq();
				State = 33; checarInstru();
				State = 34; checarOp();
				State = 35; Match(ENTER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; checarEtiq();
				State = 38; checarRsub();
				State = 39; Match(ENTER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 41; checarEtiq();
				State = 42; checarDirec();
				State = 43; checarOp();
				State = 44; Match(ENTER);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46; checarEtiq();
				State = 47; checarByte();
				State = 48; checarOpbyte();
				State = 49; Match(ENTER);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 51; inicio();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 52; fin();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpbyteContext : ParserRuleContext {
		public ITerminalNode OPERANDBYTE() { return GetToken(SICParser.OPERANDBYTE, 0); }
		public ChecarOpbyteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOpbyte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOpbyte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOpbyte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOpbyte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpbyteContext checarOpbyte() {
		ChecarOpbyteContext _localctx = new ChecarOpbyteContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_checarOpbyte);
		int _la;
		try {
			State = 57;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case DIRECTIVA:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDBYTE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case OPERANDBYTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; Match(OPERANDBYTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarByteContext : ParserRuleContext {
		public ITerminalNode DIRBYTE() { return GetToken(SICParser.DIRBYTE, 0); }
		public ChecarByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarByte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarByteContext checarByte() {
		ChecarByteContext _localctx = new ChecarByteContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_checarByte);
		int _la;
		try {
			State = 61;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case OPERANDBYTE:
			case DIRECTIVA:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==DIRBYTE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case DIRBYTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; Match(DIRBYTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarRsubContext : ParserRuleContext {
		public ITerminalNode EXEP() { return GetToken(SICParser.EXEP, 0); }
		public ChecarRsubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarRsub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarRsub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarRsub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarRsub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarRsubContext checarRsub() {
		ChecarRsubContext _localctx = new ChecarRsubContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_checarRsub);
		int _la;
		try {
			State = 65;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case DIRECTIVA:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EXEP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case EXEP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; Match(EXEP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpContext : ParserRuleContext {
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpContext checarOp() {
		ChecarOpContext _localctx = new ChecarOpContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_checarOp);
		int _la;
		try {
			State = 70;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDO) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(OPERANDO);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; checarEtiq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarDirecContext : ParserRuleContext {
		public ITerminalNode DIRECTIVA() { return GetToken(SICParser.DIRECTIVA, 0); }
		public ChecarDirecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarDirec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarDirec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarDirec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarDirec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarDirecContext checarDirec() {
		ChecarDirecContext _localctx = new ChecarDirecContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_checarDirec);
		int _la;
		try {
			State = 74;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==DIRECTIVA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case DIRECTIVA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; Match(DIRECTIVA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarEtiqContext : ParserRuleContext {
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarEtiqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarEtiq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarEtiq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarEtiq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarEtiq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarEtiqContext checarEtiq() {
		ChecarEtiqContext _localctx = new ChecarEtiqContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_checarEtiq);
		int _la;
		try {
			State = 78;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case DIRECTIVA:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ENTER:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==ETIQUETA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case ETIQUETA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; Match(ETIQUETA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarInstruContext : ParserRuleContext {
		public ITerminalNode INSTRUCCION() { return GetToken(SICParser.INSTRUCCION, 0); }
		public ChecarInstruContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarInstru; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarInstru(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarInstru(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarInstru(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarInstruContext checarInstru() {
		ChecarInstruContext _localctx = new ChecarInstruContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_checarInstru);
		int _la;
		try {
			State = 82;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case DIRECTIVA:
			case EXEP:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==INSTRUCCION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case INSTRUCCION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; Match(INSTRUCCION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SICParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; expr();
			State = 85; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\rZ\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4"+
		"\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x38\n\x4\x3\x5\x3\x5\x5\x5<\n\x5\x3\x6\x3\x6\x5\x6@\n\x6\x3"+
		"\a\x3\a\x5\a\x44\n\a\x3\b\x3\b\x3\b\x5\bI\n\b\x3\t\x3\t\x5\tM\n\t\x3\n"+
		"\x3\n\x5\nQ\n\n\x3\v\x3\v\x5\vU\n\v\x3\f\x3\f\x3\f\x3\f\x2\x2\x2\r\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x2\t"+
		"\x3\x2\x6\x6\x3\x2\x5\x5\x3\x2\b\b\x3\x2\n\n\x3\x2\a\a\x3\x2\v\v\x3\x2"+
		"\t\t[\x2\x18\x3\x2\x2\x2\x4\x1D\x3\x2\x2\x2\x6\x37\x3\x2\x2\x2\b;\x3\x2"+
		"\x2\x2\n?\x3\x2\x2\x2\f\x43\x3\x2\x2\x2\xEH\x3\x2\x2\x2\x10L\x3\x2\x2"+
		"\x2\x12P\x3\x2\x2\x2\x14T\x3\x2\x2\x2\x16V\x3\x2\x2\x2\x18\x19\x5\x12"+
		"\n\x2\x19\x1A\a\x3\x2\x2\x1A\x1B\x5\xE\b\x2\x1B\x1C\a\f\x2\x2\x1C\x3\x3"+
		"\x2\x2\x2\x1D\x1E\x5\x12\n\x2\x1E\x1F\a\x4\x2\x2\x1F \x5\xE\b\x2 !\a\f"+
		"\x2\x2!\x5\x3\x2\x2\x2\"#\x5\x12\n\x2#$\x5\x14\v\x2$%\x5\xE\b\x2%&\a\f"+
		"\x2\x2&\x38\x3\x2\x2\x2\'(\x5\x12\n\x2()\x5\f\a\x2)*\a\f\x2\x2*\x38\x3"+
		"\x2\x2\x2+,\x5\x12\n\x2,-\x5\x10\t\x2-.\x5\xE\b\x2./\a\f\x2\x2/\x38\x3"+
		"\x2\x2\x2\x30\x31\x5\x12\n\x2\x31\x32\x5\n\x6\x2\x32\x33\x5\b\x5\x2\x33"+
		"\x34\a\f\x2\x2\x34\x38\x3\x2\x2\x2\x35\x38\x5\x2\x2\x2\x36\x38\x5\x4\x3"+
		"\x2\x37\"\x3\x2\x2\x2\x37\'\x3\x2\x2\x2\x37+\x3\x2\x2\x2\x37\x30\x3\x2"+
		"\x2\x2\x37\x35\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38\a\x3\x2\x2\x2\x39<"+
		"\n\x2\x2\x2:<\a\x6\x2\x2;\x39\x3\x2\x2\x2;:\x3\x2\x2\x2<\t\x3\x2\x2\x2"+
		"=@\n\x3\x2\x2>@\a\x5\x2\x2?=\x3\x2\x2\x2?>\x3\x2\x2\x2@\v\x3\x2\x2\x2"+
		"\x41\x44\n\x4\x2\x2\x42\x44\a\b\x2\x2\x43\x41\x3\x2\x2\x2\x43\x42\x3\x2"+
		"\x2\x2\x44\r\x3\x2\x2\x2\x45I\n\x5\x2\x2\x46I\a\n\x2\x2GI\x5\x12\n\x2"+
		"H\x45\x3\x2\x2\x2H\x46\x3\x2\x2\x2HG\x3\x2\x2\x2I\xF\x3\x2\x2\x2JM\n\x6"+
		"\x2\x2KM\a\a\x2\x2LJ\x3\x2\x2\x2LK\x3\x2\x2\x2M\x11\x3\x2\x2\x2NQ\n\a"+
		"\x2\x2OQ\a\v\x2\x2PN\x3\x2\x2\x2PO\x3\x2\x2\x2Q\x13\x3\x2\x2\x2RU\n\b"+
		"\x2\x2SU\a\t\x2\x2TR\x3\x2\x2\x2TS\x3\x2\x2\x2U\x15\x3\x2\x2\x2VW\x5\x6"+
		"\x4\x2WX\a\x2\x2\x3X\x17\x3\x2\x2\x2\n\x37;?\x43HLPT";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Practica02
