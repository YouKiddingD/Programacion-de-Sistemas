//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a_k_n\Documents\Programas\Programacion-de-Sistemas\Practica03\Practica03\SIC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Practica03 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SICParser : Parser {
	public const int
		FORMATO1=1, FORMATO2=2, NUM=3, REG=4, EXEP=5, FORMATO3=6, FORMATO4=7, 
		INIT=8, ACABA=9, DIRBYTE=10, DIRECTIVA=11, INDIRECTO=12, INMEDIATO=13, 
		ETIQUETA=14, OPERANDO=15, ENTER=16, OPERANDBYTE=17, QUOTE=18, WS=19, ANYCHAR=20;
	public const int
		RULE_go = 0, RULE_inicio = 1, RULE_fin = 2, RULE_expr = 3, RULE_checarInstruExt = 4, 
		RULE_checarOPF2 = 5, RULE_checarINIT = 6, RULE_checarACABA = 7, RULE_checarOpbyte = 8, 
		RULE_checarByte = 9, RULE_checarRsub = 10, RULE_checarOpSTART = 11, RULE_checarOp = 12, 
		RULE_checarOpEND = 13, RULE_checarDirec = 14, RULE_casoDirec = 15, RULE_checarEtiq = 16, 
		RULE_checarInstru = 17, RULE_checarOPExt = 18, RULE_checarOPF3 = 19, RULE_compileUnit = 20, 
		RULE_updateCPInst = 21, RULE_updateLine = 22, RULE_updateCPByte = 23;
	public static readonly string[] ruleNames = {
		"go", "inicio", "fin", "expr", "checarInstruExt", "checarOPF2", "checarINIT", 
		"checarACABA", "checarOpbyte", "checarByte", "checarRsub", "checarOpSTART", 
		"checarOp", "checarOpEND", "checarDirec", "casoDirec", "checarEtiq", "checarInstru", 
		"checarOPExt", "checarOPF3", "compileUnit", "updateCPInst", "updateLine", 
		"updateCPByte"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'\n'", null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FORMATO1", "FORMATO2", "NUM", "REG", "EXEP", "FORMATO3", "FORMATO4", 
		"INIT", "ACABA", "DIRBYTE", "DIRECTIVA", "INDIRECTO", "INMEDIATO", "ETIQUETA", 
		"OPERANDO", "ENTER", "OPERANDBYTE", "QUOTE", "WS", "ANYCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		int i=1;
		string rutae = "";
		string rutai = "";
		int CP=0;
		string linea = "";
		string Direct = "";
		int OP = 0;
		string valor="";
		int form = 0;
		
	public SICParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class GoContext : ParserRuleContext {
		public string vale;
		public string vali;
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GoContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public GoContext(ParserRuleContext parent, int invokingState, string vale, string vali)
			: base(parent, invokingState)
		{
			this.vale = vale;
			this.vali = vali;
		}
		public override int RuleIndex { get { return RULE_go; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterGo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitGo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoContext go(string vale, string vali) {
		GoContext _localctx = new GoContext(_ctx, State, vale, vali);
		EnterRule(_localctx, 0, RULE_go);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			rutae=vale; rutai = vali;
			State = 49; inicio();
			State = 53;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 50; expr();
					}
					} 
				}
				State = 55;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 56; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarINITContext checarINIT() {
			return GetRuleContext<ChecarINITContext>(0);
		}
		public ChecarOpSTARTContext checarOpSTART() {
			return GetRuleContext<ChecarOpSTARTContext>(0);
		}
		public UpdateLineContext updateLine() {
			return GetRuleContext<UpdateLineContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; checarEtiq();
			State = 59; checarINIT();
			State = 60; checarOpSTART();
			State = 61; updateLine();
			State = 62; Match(ENTER);
			i++;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarACABAContext checarACABA() {
			return GetRuleContext<ChecarACABAContext>(0);
		}
		public ChecarOpSTARTContext checarOpSTART() {
			return GetRuleContext<ChecarOpSTARTContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; checarEtiq();
			State = 66; checarACABA();
			State = 67; checarOpSTART();
			State = 68; Match(ENTER);
			i++;
			using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutai, true)){ file.WriteLine(linea);}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarInstruExtContext checarInstruExt() {
			return GetRuleContext<ChecarInstruExtContext>(0);
		}
		public UpdateCPInstContext updateCPInst() {
			return GetRuleContext<UpdateCPInstContext>(0);
		}
		public UpdateLineContext updateLine() {
			return GetRuleContext<UpdateLineContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public ChecarInstruContext checarInstru() {
			return GetRuleContext<ChecarInstruContext>(0);
		}
		public ChecarOpContext checarOp() {
			return GetRuleContext<ChecarOpContext>(0);
		}
		public ChecarRsubContext checarRsub() {
			return GetRuleContext<ChecarRsubContext>(0);
		}
		public ChecarDirecContext checarDirec() {
			return GetRuleContext<ChecarDirecContext>(0);
		}
		public CasoDirecContext casoDirec() {
			return GetRuleContext<CasoDirecContext>(0);
		}
		public ChecarByteContext checarByte() {
			return GetRuleContext<ChecarByteContext>(0);
		}
		public ChecarOpbyteContext checarOpbyte() {
			return GetRuleContext<ChecarOpbyteContext>(0);
		}
		public UpdateCPByteContext updateCPByte() {
			return GetRuleContext<UpdateCPByteContext>(0);
		}
		public ITerminalNode WS() { return GetToken(SICParser.WS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_expr);
		try {
			State = 113;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 72; checarEtiq();
					State = 73; checarInstruExt();
					State = 74; updateCPInst();
					State = 75; updateLine();
					State = 76; Match(ENTER);
					form = 0;
					}
					break;

				case 2:
					{
					State = 79; checarEtiq();
					State = 80; checarInstru();
					State = 81; checarOp();
					State = 82; updateCPInst();
					State = 83; updateLine();
					State = 84; Match(ENTER);
					}
					break;

				case 3:
					{
					State = 86; checarEtiq();
					State = 87; checarRsub();
					State = 88; updateCPInst();
					State = 89; updateLine();
					State = 90; Match(ENTER);
					}
					break;

				case 4:
					{
					State = 92; checarEtiq();
					State = 93; checarDirec();
					State = 94; checarOp();
					State = 95; casoDirec();
					State = 96; updateLine();
					State = 97; Match(ENTER);
					}
					break;

				case 5:
					{
					State = 99; checarEtiq();
					State = 100; checarByte();
					State = 101; checarOpbyte();
					State = 102; updateCPByte();
					State = 103; updateLine();
					State = 104; Match(ENTER);
					}
					break;
				}
				i++;
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; Match(WS);
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){file.WriteLine("Error en la estructura de la linea: " + i);}
				linea+="ERROR	";
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarInstruExtContext : ParserRuleContext {
		public IToken _FORMATO1;
		public IToken _FORMATO2;
		public IToken _FORMATO3;
		public IToken _FORMATO4;
		public ITerminalNode FORMATO1() { return GetToken(SICParser.FORMATO1, 0); }
		public ITerminalNode FORMATO2() { return GetToken(SICParser.FORMATO2, 0); }
		public ChecarOPF2Context checarOPF2() {
			return GetRuleContext<ChecarOPF2Context>(0);
		}
		public ITerminalNode FORMATO3() { return GetToken(SICParser.FORMATO3, 0); }
		public ChecarOPF3Context checarOPF3() {
			return GetRuleContext<ChecarOPF3Context>(0);
		}
		public ITerminalNode FORMATO4() { return GetToken(SICParser.FORMATO4, 0); }
		public ITerminalNode WS() { return GetToken(SICParser.WS, 0); }
		public ChecarInstruExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarInstruExt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarInstruExt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarInstruExt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarInstruExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarInstruExtContext checarInstruExt() {
		ChecarInstruExtContext _localctx = new ChecarInstruExtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_checarInstruExt);
		try {
			State = 127;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FORMATO1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; _localctx._FORMATO1 = Match(FORMATO1);
				linea+=(_localctx._FORMATO1!=null?_localctx._FORMATO1.Text:null); form=1;
				}
				break;
			case FORMATO2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; _localctx._FORMATO2 = Match(FORMATO2);
				linea+=(_localctx._FORMATO2!=null?_localctx._FORMATO2.Text:null); form=2;
				State = 119; checarOPF2();
				}
				break;
			case FORMATO3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; _localctx._FORMATO3 = Match(FORMATO3);
				linea+=(_localctx._FORMATO3!=null?_localctx._FORMATO3.Text:null); form=3;
				State = 122; checarOPF3();
				}
				break;
			case FORMATO4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 123; _localctx._FORMATO4 = Match(FORMATO4);
				linea+=(_localctx._FORMATO4!=null?_localctx._FORMATO4.Text:null); form=4;
				State = 125; checarOPF3();
				}
				break;
			case WS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 126; Match(WS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOPF2Context : ParserRuleContext {
		public IToken _REG;
		public IToken _NUM;
		public ITerminalNode ANYCHAR() { return GetToken(SICParser.ANYCHAR, 0); }
		public ITerminalNode REG() { return GetToken(SICParser.REG, 0); }
		public ITerminalNode NUM() { return GetToken(SICParser.NUM, 0); }
		public ChecarOPF2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOPF2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOPF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOPF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOPF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOPF2Context checarOPF2() {
		ChecarOPF2Context _localctx = new ChecarOPF2Context(_ctx, State);
		EnterRule(_localctx, 10, RULE_checarOPF2);
		try {
			State = 136;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ANYCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; Match(ANYCHAR);
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){file.WriteLine("Error en la estructura de la linea: " + i);}
				linea+="ERROR	";
				}
				break;
			case REG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; _localctx._REG = Match(REG);
				linea+=(_localctx._REG!=null?_localctx._REG.Text:null);
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; _localctx._NUM = Match(NUM);
				linea+=(_localctx._NUM!=null?_localctx._NUM.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarINITContext : ParserRuleContext {
		public IToken _INIT;
		public ITerminalNode INIT() { return GetToken(SICParser.INIT, 0); }
		public ChecarINITContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarINIT; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarINIT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarINIT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarINIT(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarINITContext checarINIT() {
		ChecarINITContext _localctx = new ChecarINITContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_checarINIT);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; _localctx._INIT = Match(INIT);
			linea+= (_localctx._INIT!=null?_localctx._INIT.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarACABAContext : ParserRuleContext {
		public IToken _ACABA;
		public ITerminalNode ACABA() { return GetToken(SICParser.ACABA, 0); }
		public ChecarACABAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarACABA; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarACABA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarACABA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarACABA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarACABAContext checarACABA() {
		ChecarACABAContext _localctx = new ChecarACABAContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_checarACABA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; _localctx._ACABA = Match(ACABA);
			linea+= (_localctx._ACABA!=null?_localctx._ACABA.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpbyteContext : ParserRuleContext {
		public IToken _OPERANDBYTE;
		public ITerminalNode OPERANDBYTE() { return GetToken(SICParser.OPERANDBYTE, 0); }
		public ChecarOpbyteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOpbyte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOpbyte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOpbyte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOpbyte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpbyteContext checarOpbyte() {
		ChecarOpbyteContext _localctx = new ChecarOpbyteContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_checarOpbyte);
		int _la;
		try {
			State = 149;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FORMATO1:
			case FORMATO2:
			case NUM:
			case REG:
			case EXEP:
			case FORMATO3:
			case FORMATO4:
			case INIT:
			case ACABA:
			case DIRBYTE:
			case DIRECTIVA:
			case INDIRECTO:
			case INMEDIATO:
			case ETIQUETA:
			case OPERANDO:
			case ENTER:
			case QUOTE:
			case WS:
			case ANYCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDBYTE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error en la estructura de la linea: " + i);}
				linea+= "ERROR	";
				}
				break;
			case OPERANDBYTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; _localctx._OPERANDBYTE = Match(OPERANDBYTE);
				linea+= (_localctx._OPERANDBYTE!=null?_localctx._OPERANDBYTE.Text:null); valor = (_localctx._OPERANDBYTE!=null?_localctx._OPERANDBYTE.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarByteContext : ParserRuleContext {
		public IToken _DIRBYTE;
		public ITerminalNode DIRBYTE() { return GetToken(SICParser.DIRBYTE, 0); }
		public ITerminalNode ANYCHAR() { return GetToken(SICParser.ANYCHAR, 0); }
		public ChecarByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarByte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarByteContext checarByte() {
		ChecarByteContext _localctx = new ChecarByteContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_checarByte);
		int _la;
		try {
			State = 159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==DIRBYTE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error en la estructura de la linea: " + i);}
				linea+= "ERROR	";
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; _localctx._DIRBYTE = Match(DIRBYTE);
				linea+= (_localctx._DIRBYTE!=null?_localctx._DIRBYTE.Text:null);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156; Match(ANYCHAR);
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error en la estructura de la linea: " + i);}
				linea+= "ERROR	";
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarRsubContext : ParserRuleContext {
		public IToken _EXEP;
		public ITerminalNode EXEP() { return GetToken(SICParser.EXEP, 0); }
		public ChecarRsubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarRsub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarRsub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarRsub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarRsub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarRsubContext checarRsub() {
		ChecarRsubContext _localctx = new ChecarRsubContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_checarRsub);
		int _la;
		try {
			State = 166;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case EXEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; _localctx._EXEP = Match(EXEP);
				linea+= (_localctx._EXEP!=null?_localctx._EXEP.Text:null);
				}
				break;
			case FORMATO1:
			case FORMATO2:
			case NUM:
			case REG:
			case FORMATO3:
			case FORMATO4:
			case INIT:
			case ACABA:
			case DIRBYTE:
			case DIRECTIVA:
			case INDIRECTO:
			case INMEDIATO:
			case ETIQUETA:
			case OPERANDO:
			case ENTER:
			case OPERANDBYTE:
			case QUOTE:
			case WS:
			case ANYCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EXEP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error en la estructura de la linea: " + i);}
				linea+= "ERROR	";
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpSTARTContext : ParserRuleContext {
		public IToken _OPERANDO;
		public IToken _ETIQUETA;
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarOpbyteContext checarOpbyte() {
			return GetRuleContext<ChecarOpbyteContext>(0);
		}
		public ChecarOpSTARTContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOpSTART; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOpSTART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOpSTART(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOpSTART(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpSTARTContext checarOpSTART() {
		ChecarOpSTARTContext _localctx = new ChecarOpSTARTContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_checarOpSTART);
		int _la;
		try {
			State = 174;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168; _localctx._OPERANDO = Match(OPERANDO);

					linea+= (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null);
					if((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='H' || (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='h')
					{
						string final = (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Substring(0, (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length - 1);
						CP = System.Convert.ToInt32(final,16);
					}
					else
					{
						CP =  System.Int32.Parse((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null));
					}
					linea = CP + linea.Substring(1,linea.Length-1);
					
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; checarOpbyte();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDO) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpContext : ParserRuleContext {
		public IToken _OPERANDO;
		public IToken _ETIQUETA;
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpContext checarOp() {
		ChecarOpContext _localctx = new ChecarOpContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_checarOp);
		int _la;
		try {
			State = 181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; _localctx._OPERANDO = Match(OPERANDO);

					linea+= (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null);
					if((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='H' || (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='h')
					{
						string final = (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Substring(0, (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length - 1);
						OP = System.Convert.ToInt32(final,16);
					}
					else
					{
						OP =  System.Int32.Parse((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null));
					}
					
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDO) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpENDContext : ParserRuleContext {
		public IToken _ETIQUETA;
		public IToken _OPERANDO;
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ChecarOpENDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOpEND; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOpEND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOpEND(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOpEND(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpENDContext checarOpEND() {
		ChecarOpENDContext _localctx = new ChecarOpENDContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_checarOpEND);
		int _la;
		try {
			State = 188;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; _localctx._OPERANDO = Match(OPERANDO);

					linea+= (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null);
					if((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='H' || (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='h')
					{
						string final = (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Substring(0, (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length - 1);
						OP = System.Convert.ToInt32(final,16);
					}
					else
					{
						OP =  System.Int32.Parse((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null));
					}
					
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDO) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarDirecContext : ParserRuleContext {
		public IToken _DIRECTIVA;
		public ChecarByteContext checarByte() {
			return GetRuleContext<ChecarByteContext>(0);
		}
		public ITerminalNode DIRECTIVA() { return GetToken(SICParser.DIRECTIVA, 0); }
		public ChecarDirecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarDirec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarDirec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarDirec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarDirec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarDirecContext checarDirec() {
		ChecarDirecContext _localctx = new ChecarDirecContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_checarDirec);
		int _la;
		try {
			State = 194;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FORMATO1:
			case FORMATO2:
			case NUM:
			case REG:
			case EXEP:
			case FORMATO3:
			case FORMATO4:
			case INIT:
			case ACABA:
			case DIRBYTE:
			case INDIRECTO:
			case INMEDIATO:
			case ETIQUETA:
			case OPERANDO:
			case ENTER:
			case OPERANDBYTE:
			case QUOTE:
			case WS:
			case ANYCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==DIRECTIVA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 191; checarByte();
				}
				break;
			case DIRECTIVA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; _localctx._DIRECTIVA = Match(DIRECTIVA);
				linea+= (_localctx._DIRECTIVA!=null?_localctx._DIRECTIVA.Text:null); Direct = (_localctx._DIRECTIVA!=null?_localctx._DIRECTIVA.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasoDirecContext : ParserRuleContext {
		public CasoDirecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casoDirec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterCasoDirec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitCasoDirec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCasoDirec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasoDirecContext casoDirec() {
		CasoDirecContext _localctx = new CasoDirecContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_casoDirec);
		try {
			EnterOuterAlt(_localctx, 1);
			{

			switch(Direct)
				{
					case "WORD\t": CP+=3;
					break;
					case "RESW\t": CP+=OP*3;
					break;
					case "RESB\t": CP+=OP;
					break;
				}
						
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarEtiqContext : ParserRuleContext {
		public IToken _ETIQUETA;
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarEtiqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarEtiq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarEtiq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarEtiq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarEtiq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarEtiqContext checarEtiq() {
		ChecarEtiqContext _localctx = new ChecarEtiqContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_checarEtiq);
		int _la;
		try {
			State = 203;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FORMATO1:
			case FORMATO2:
			case NUM:
			case REG:
			case EXEP:
			case FORMATO3:
			case FORMATO4:
			case INIT:
			case ACABA:
			case DIRBYTE:
			case DIRECTIVA:
			case INDIRECTO:
			case INMEDIATO:
			case OPERANDO:
			case ENTER:
			case OPERANDBYTE:
			case QUOTE:
			case WS:
			case ANYCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==ETIQUETA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error en la estructura de la linea: " + i);}
				linea+="ERROR	";
				}
				break;
			case ETIQUETA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+= CP + " "; if((_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null)=="\t" || (_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null)==" "){linea+="u ";}else{linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarInstruContext : ParserRuleContext {
		public IToken _FORMATO3;
		public ITerminalNode FORMATO3() { return GetToken(SICParser.FORMATO3, 0); }
		public ChecarDirecContext checarDirec() {
			return GetRuleContext<ChecarDirecContext>(0);
		}
		public ChecarInstruContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarInstru; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarInstru(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarInstru(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarInstru(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarInstruContext checarInstru() {
		ChecarInstruContext _localctx = new ChecarInstruContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_checarInstru);
		int _la;
		try {
			State = 209;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FORMATO3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; _localctx._FORMATO3 = Match(FORMATO3);
				linea+=(_localctx._FORMATO3!=null?_localctx._FORMATO3.Text:null);
				}
				break;
			case FORMATO1:
			case FORMATO2:
			case NUM:
			case REG:
			case EXEP:
			case FORMATO4:
			case INIT:
			case ACABA:
			case DIRBYTE:
			case DIRECTIVA:
			case INDIRECTO:
			case INMEDIATO:
			case ETIQUETA:
			case OPERANDO:
			case ENTER:
			case OPERANDBYTE:
			case QUOTE:
			case WS:
			case ANYCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==FORMATO3) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 208; checarDirec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOPExtContext : ParserRuleContext {
		public ChecarOPF2Context checarOPF2() {
			return GetRuleContext<ChecarOPF2Context>(0);
		}
		public ChecarOPF3Context checarOPF3() {
			return GetRuleContext<ChecarOPF3Context>(0);
		}
		public ChecarOPExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOPExt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOPExt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOPExt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOPExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOPExtContext checarOPExt() {
		ChecarOPExtContext _localctx = new ChecarOPExtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_checarOPExt);
		try {
			State = 213;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM:
			case REG:
			case ANYCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; checarOPF2();
				}
				break;
			case INDIRECTO:
			case INMEDIATO:
			case ETIQUETA:
			case OPERANDO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; checarOPF3();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOPF3Context : ParserRuleContext {
		public IToken _OPERANDO;
		public IToken _ETIQUETA;
		public IToken _INDIRECTO;
		public IToken _INMEDIATO;
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ITerminalNode INDIRECTO() { return GetToken(SICParser.INDIRECTO, 0); }
		public ITerminalNode INMEDIATO() { return GetToken(SICParser.INMEDIATO, 0); }
		public ChecarOPF3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOPF3; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOPF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOPF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOPF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOPF3Context checarOPF3() {
		ChecarOPF3Context _localctx = new ChecarOPF3Context(_ctx, State);
		EnterRule(_localctx, 38, RULE_checarOPF3);
		try {
			State = 223;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OPERANDO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215; _localctx._OPERANDO = Match(OPERANDO);
				linea+=(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null);
				}
				break;
			case ETIQUETA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);
				}
				break;
			case INDIRECTO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219; _localctx._INDIRECTO = Match(INDIRECTO);
				linea+=(_localctx._INDIRECTO!=null?_localctx._INDIRECTO.Text:null);
				}
				break;
			case INMEDIATO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 221; _localctx._INMEDIATO = Match(INMEDIATO);
				linea+=(_localctx._INMEDIATO!=null?_localctx._INMEDIATO.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SICParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; expr();
			State = 226; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateCPInstContext : ParserRuleContext {
		public UpdateCPInstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateCPInst; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterUpdateCPInst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitUpdateCPInst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateCPInst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateCPInstContext updateCPInst() {
		UpdateCPInstContext _localctx = new UpdateCPInstContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_updateCPInst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			switch(form)
				{
					case 1: CP+=1;
					break;
					case 2: CP+=2;
					break;
					case 3: CP+=3;
					break;
					case 4: CP+=4;
					break;
				}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateLineContext : ParserRuleContext {
		public UpdateLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterUpdateLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitUpdateLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateLineContext updateLine() {
		UpdateLineContext _localctx = new UpdateLineContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_updateLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			linea+='\n';
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateCPByteContext : ParserRuleContext {
		public UpdateCPByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateCPByte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterUpdateCPByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitUpdateCPByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateCPByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateCPByteContext updateCPByte() {
		UpdateCPByteContext _localctx = new UpdateCPByteContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_updateCPByte);
		try {
			EnterOuterAlt(_localctx, 1);
			{

				if(valor[0]=='C')
				{
					valor = valor.Substring(2,valor.Length-3);
					CP+=valor.Length;
				}
				else
				{
					valor = valor.Substring(2,valor.Length-3);
					CP+=(int)(valor.Length/2);
				}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x16\xED\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2\x3\x2"+
		"\a\x2\x36\n\x2\f\x2\xE\x2\x39\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5m\n\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5t\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x82\n\x6\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x8B\n\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x5\n\x98\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x5\v\xA2\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xA9\n\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x5\r\xB1\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xB8"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xBF\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x5\x10\xC5\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\xCE\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xD4\n\x13\x3"+
		"\x14\x3\x14\x5\x14\xD8\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x5\x15\xE2\n\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x19\x2\x2\x2\x1A\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x2\t\x3\x2\x13\x13\x3\x2\f\f"+
		"\x3\x2\a\a\x3\x2\x11\x11\x3\x2\r\r\x3\x2\x10\x10\x3\x2\b\b\xF2\x2\x32"+
		"\x3\x2\x2\x2\x4<\x3\x2\x2\x2\x6\x43\x3\x2\x2\x2\bs\x3\x2\x2\x2\n\x81\x3"+
		"\x2\x2\x2\f\x8A\x3\x2\x2\x2\xE\x8C\x3\x2\x2\x2\x10\x8F\x3\x2\x2\x2\x12"+
		"\x97\x3\x2\x2\x2\x14\xA1\x3\x2\x2\x2\x16\xA8\x3\x2\x2\x2\x18\xB0\x3\x2"+
		"\x2\x2\x1A\xB7\x3\x2\x2\x2\x1C\xBE\x3\x2\x2\x2\x1E\xC4\x3\x2\x2\x2 \xC6"+
		"\x3\x2\x2\x2\"\xCD\x3\x2\x2\x2$\xD3\x3\x2\x2\x2&\xD7\x3\x2\x2\x2(\xE1"+
		"\x3\x2\x2\x2*\xE3\x3\x2\x2\x2,\xE6\x3\x2\x2\x2.\xE8\x3\x2\x2\x2\x30\xEA"+
		"\x3\x2\x2\x2\x32\x33\b\x2\x1\x2\x33\x37\x5\x4\x3\x2\x34\x36\x5\b\x5\x2"+
		"\x35\x34\x3\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3"+
		"\x2\x2\x2\x38:\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:;\x5\x6\x4\x2;\x3\x3\x2"+
		"\x2\x2<=\x5\"\x12\x2=>\x5\xE\b\x2>?\x5\x18\r\x2?@\x5.\x18\x2@\x41\a\x12"+
		"\x2\x2\x41\x42\b\x3\x1\x2\x42\x5\x3\x2\x2\x2\x43\x44\x5\"\x12\x2\x44\x45"+
		"\x5\x10\t\x2\x45\x46\x5\x18\r\x2\x46G\a\x12\x2\x2GH\b\x4\x1\x2HI\b\x4"+
		"\x1\x2I\a\x3\x2\x2\x2JK\x5\"\x12\x2KL\x5\n\x6\x2LM\x5,\x17\x2MN\x5.\x18"+
		"\x2NO\a\x12\x2\x2OP\b\x5\x1\x2Pm\x3\x2\x2\x2QR\x5\"\x12\x2RS\x5$\x13\x2"+
		"ST\x5\x1A\xE\x2TU\x5,\x17\x2UV\x5.\x18\x2VW\a\x12\x2\x2Wm\x3\x2\x2\x2"+
		"XY\x5\"\x12\x2YZ\x5\x16\f\x2Z[\x5,\x17\x2[\\\x5.\x18\x2\\]\a\x12\x2\x2"+
		"]m\x3\x2\x2\x2^_\x5\"\x12\x2_`\x5\x1E\x10\x2`\x61\x5\x1A\xE\x2\x61\x62"+
		"\x5 \x11\x2\x62\x63\x5.\x18\x2\x63\x64\a\x12\x2\x2\x64m\x3\x2\x2\x2\x65"+
		"\x66\x5\"\x12\x2\x66g\x5\x14\v\x2gh\x5\x12\n\x2hi\x5\x30\x19\x2ij\x5."+
		"\x18\x2jk\a\x12\x2\x2km\x3\x2\x2\x2lJ\x3\x2\x2\x2lQ\x3\x2\x2\x2lX\x3\x2"+
		"\x2\x2l^\x3\x2\x2\x2l\x65\x3\x2\x2\x2mn\x3\x2\x2\x2no\b\x5\x1\x2ot\x3"+
		"\x2\x2\x2pq\a\x15\x2\x2qr\b\x5\x1\x2rt\b\x5\x1\x2sl\x3\x2\x2\x2sp\x3\x2"+
		"\x2\x2t\t\x3\x2\x2\x2uv\a\x3\x2\x2v\x82\b\x6\x1\x2wx\a\x4\x2\x2xy\b\x6"+
		"\x1\x2y\x82\x5\f\a\x2z{\a\b\x2\x2{|\b\x6\x1\x2|\x82\x5(\x15\x2}~\a\t\x2"+
		"\x2~\x7F\b\x6\x1\x2\x7F\x82\x5(\x15\x2\x80\x82\a\x15\x2\x2\x81u\x3\x2"+
		"\x2\x2\x81w\x3\x2\x2\x2\x81z\x3\x2\x2\x2\x81}\x3\x2\x2\x2\x81\x80\x3\x2"+
		"\x2\x2\x82\v\x3\x2\x2\x2\x83\x84\a\x16\x2\x2\x84\x85\b\a\x1\x2\x85\x8B"+
		"\b\a\x1\x2\x86\x87\a\x6\x2\x2\x87\x8B\b\a\x1\x2\x88\x89\a\x5\x2\x2\x89"+
		"\x8B\b\a\x1\x2\x8A\x83\x3\x2\x2\x2\x8A\x86\x3\x2\x2\x2\x8A\x88\x3\x2\x2"+
		"\x2\x8B\r\x3\x2\x2\x2\x8C\x8D\a\n\x2\x2\x8D\x8E\b\b\x1\x2\x8E\xF\x3\x2"+
		"\x2\x2\x8F\x90\a\v\x2\x2\x90\x91\b\t\x1\x2\x91\x11\x3\x2\x2\x2\x92\x93"+
		"\n\x2\x2\x2\x93\x94\b\n\x1\x2\x94\x98\b\n\x1\x2\x95\x96\a\x13\x2\x2\x96"+
		"\x98\b\n\x1\x2\x97\x92\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x13\x3\x2\x2"+
		"\x2\x99\x9A\n\x3\x2\x2\x9A\x9B\b\v\x1\x2\x9B\xA2\b\v\x1\x2\x9C\x9D\a\f"+
		"\x2\x2\x9D\xA2\b\v\x1\x2\x9E\x9F\a\x16\x2\x2\x9F\xA0\b\v\x1\x2\xA0\xA2"+
		"\b\v\x1\x2\xA1\x99\x3\x2\x2\x2\xA1\x9C\x3\x2\x2\x2\xA1\x9E\x3\x2\x2\x2"+
		"\xA2\x15\x3\x2\x2\x2\xA3\xA4\a\a\x2\x2\xA4\xA9\b\f\x1\x2\xA5\xA6\n\x4"+
		"\x2\x2\xA6\xA7\b\f\x1\x2\xA7\xA9\b\f\x1\x2\xA8\xA3\x3\x2\x2\x2\xA8\xA5"+
		"\x3\x2\x2\x2\xA9\x17\x3\x2\x2\x2\xAA\xAB\a\x11\x2\x2\xAB\xB1\b\r\x1\x2"+
		"\xAC\xAD\a\x10\x2\x2\xAD\xB1\b\r\x1\x2\xAE\xB1\x5\x12\n\x2\xAF\xB1\n\x5"+
		"\x2\x2\xB0\xAA\x3\x2\x2\x2\xB0\xAC\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0"+
		"\xAF\x3\x2\x2\x2\xB1\x19\x3\x2\x2\x2\xB2\xB3\a\x11\x2\x2\xB3\xB8\b\xE"+
		"\x1\x2\xB4\xB5\a\x10\x2\x2\xB5\xB8\b\xE\x1\x2\xB6\xB8\n\x5\x2\x2\xB7\xB2"+
		"\x3\x2\x2\x2\xB7\xB4\x3\x2\x2\x2\xB7\xB6\x3\x2\x2\x2\xB8\x1B\x3\x2\x2"+
		"\x2\xB9\xBA\a\x10\x2\x2\xBA\xBF\b\xF\x1\x2\xBB\xBC\a\x11\x2\x2\xBC\xBF"+
		"\b\xF\x1\x2\xBD\xBF\n\x5\x2\x2\xBE\xB9\x3\x2\x2\x2\xBE\xBB\x3\x2\x2\x2"+
		"\xBE\xBD\x3\x2\x2\x2\xBF\x1D\x3\x2\x2\x2\xC0\xC1\n\x6\x2\x2\xC1\xC5\x5"+
		"\x14\v\x2\xC2\xC3\a\r\x2\x2\xC3\xC5\b\x10\x1\x2\xC4\xC0\x3\x2\x2\x2\xC4"+
		"\xC2\x3\x2\x2\x2\xC5\x1F\x3\x2\x2\x2\xC6\xC7\b\x11\x1\x2\xC7!\x3\x2\x2"+
		"\x2\xC8\xC9\n\a\x2\x2\xC9\xCA\b\x12\x1\x2\xCA\xCE\b\x12\x1\x2\xCB\xCC"+
		"\a\x10\x2\x2\xCC\xCE\b\x12\x1\x2\xCD\xC8\x3\x2\x2\x2\xCD\xCB\x3\x2\x2"+
		"\x2\xCE#\x3\x2\x2\x2\xCF\xD0\a\b\x2\x2\xD0\xD4\b\x13\x1\x2\xD1\xD2\n\b"+
		"\x2\x2\xD2\xD4\x5\x1E\x10\x2\xD3\xCF\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4"+
		"%\x3\x2\x2\x2\xD5\xD8\x5\f\a\x2\xD6\xD8\x5(\x15\x2\xD7\xD5\x3\x2\x2\x2"+
		"\xD7\xD6\x3\x2\x2\x2\xD8\'\x3\x2\x2\x2\xD9\xDA\a\x11\x2\x2\xDA\xE2\b\x15"+
		"\x1\x2\xDB\xDC\a\x10\x2\x2\xDC\xE2\b\x15\x1\x2\xDD\xDE\a\xE\x2\x2\xDE"+
		"\xE2\b\x15\x1\x2\xDF\xE0\a\xF\x2\x2\xE0\xE2\b\x15\x1\x2\xE1\xD9\x3\x2"+
		"\x2\x2\xE1\xDB\x3\x2\x2\x2\xE1\xDD\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE2"+
		")\x3\x2\x2\x2\xE3\xE4\x5\b\x5\x2\xE4\xE5\a\x2\x2\x3\xE5+\x3\x2\x2\x2\xE6"+
		"\xE7\b\x17\x1\x2\xE7-\x3\x2\x2\x2\xE8\xE9\b\x18\x1\x2\xE9/\x3\x2\x2\x2"+
		"\xEA\xEB\b\x19\x1\x2\xEB\x31\x3\x2\x2\x2\x12\x37ls\x81\x8A\x97\xA1\xA8"+
		"\xB0\xB7\xBE\xC4\xCD\xD3\xD7\xE1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Practica03
