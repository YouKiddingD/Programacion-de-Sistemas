//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\DELL\Documents\Lap Work\U\Programacion de Sistemas\Practicas\Programacion-de-Sistemas\Practica03\Practica03\SIC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Practica03 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SICParser : Parser {
	public const int
		INIT=1, ACABA=2, DIRBYTE=3, OPERANDBYTE=4, DIRECTIVA=5, EXEP=6, INSTRUCCION=7, 
		OPERANDO=8, ETIQUETA=9, ENTER=10, QUOTE=11, WS=12;
	public const int
		RULE_go = 0, RULE_inicio = 1, RULE_fin = 2, RULE_expr = 3, RULE_checarINIT = 4, 
		RULE_checarACABA = 5, RULE_checarOpbyte = 6, RULE_checarByte = 7, RULE_checarRsub = 8, 
		RULE_checarOpSTART = 9, RULE_checarOp = 10, RULE_checarOpEND = 11, RULE_checarDirec = 12, 
		RULE_casoDirec = 13, RULE_checarEtiq = 14, RULE_checarInstru = 15, RULE_compileUnit = 16, 
		RULE_updateCPInst = 17, RULE_updateLine = 18, RULE_updateCPByte = 19;
	public static readonly string[] ruleNames = {
		"go", "inicio", "fin", "expr", "checarINIT", "checarACABA", "checarOpbyte", 
		"checarByte", "checarRsub", "checarOpSTART", "checarOp", "checarOpEND", 
		"checarDirec", "casoDirec", "checarEtiq", "checarInstru", "compileUnit", 
		"updateCPInst", "updateLine", "updateCPByte"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'\n'", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INIT", "ACABA", "DIRBYTE", "OPERANDBYTE", "DIRECTIVA", "EXEP", 
		"INSTRUCCION", "OPERANDO", "ETIQUETA", "ENTER", "QUOTE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		int i=1;
		string rutae = "";
		string rutai = "";
		int CP=0;
		string linea = "";
		string Direct = "";
		int OP = 0;
		string valor="";
		
	public SICParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class GoContext : ParserRuleContext {
		public string vale;
		public string vali;
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GoContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public GoContext(ParserRuleContext parent, int invokingState, string vale, string vali)
			: base(parent, invokingState)
		{
			this.vale = vale;
			this.vali = vali;
		}
		public override int RuleIndex { get { return RULE_go; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterGo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitGo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoContext go(string vale, string vali) {
		GoContext _localctx = new GoContext(_ctx, State, vale, vali);
		EnterRule(_localctx, 0, RULE_go);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			rutae=vale; rutai = vali;
			State = 41; inicio();
			State = 45;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 42; expr();
					}
					} 
				}
				State = 47;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 48; fin();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarINITContext checarINIT() {
			return GetRuleContext<ChecarINITContext>(0);
		}
		public ChecarOpSTARTContext checarOpSTART() {
			return GetRuleContext<ChecarOpSTARTContext>(0);
		}
		public UpdateLineContext updateLine() {
			return GetRuleContext<UpdateLineContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; checarEtiq();
			State = 51; checarINIT();
			State = 52; checarOpSTART();
			State = 53; updateLine();
			State = 54; Match(ENTER);
			i++;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarACABAContext checarACABA() {
			return GetRuleContext<ChecarACABAContext>(0);
		}
		public ChecarOpENDContext checarOpEND() {
			return GetRuleContext<ChecarOpENDContext>(0);
		}
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_fin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; checarEtiq();
			State = 58; checarACABA();
			State = 59; checarOpEND();
			i++;
			using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutai, true)){ file.WriteLine(linea);}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ChecarEtiqContext checarEtiq() {
			return GetRuleContext<ChecarEtiqContext>(0);
		}
		public ChecarInstruContext checarInstru() {
			return GetRuleContext<ChecarInstruContext>(0);
		}
		public ChecarOpContext checarOp() {
			return GetRuleContext<ChecarOpContext>(0);
		}
		public UpdateCPInstContext updateCPInst() {
			return GetRuleContext<UpdateCPInstContext>(0);
		}
		public UpdateLineContext updateLine() {
			return GetRuleContext<UpdateLineContext>(0);
		}
		public ITerminalNode ENTER() { return GetToken(SICParser.ENTER, 0); }
		public ChecarRsubContext checarRsub() {
			return GetRuleContext<ChecarRsubContext>(0);
		}
		public ChecarDirecContext checarDirec() {
			return GetRuleContext<ChecarDirecContext>(0);
		}
		public CasoDirecContext casoDirec() {
			return GetRuleContext<CasoDirecContext>(0);
		}
		public ChecarByteContext checarByte() {
			return GetRuleContext<ChecarByteContext>(0);
		}
		public ChecarOpbyteContext checarOpbyte() {
			return GetRuleContext<ChecarOpbyteContext>(0);
		}
		public UpdateCPByteContext updateCPByte() {
			return GetRuleContext<UpdateCPByteContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 63; checarEtiq();
				State = 64; checarInstru();
				State = 65; checarOp();
				State = 66; updateCPInst();
				State = 67; updateLine();
				State = 68; Match(ENTER);
				}
				break;

			case 2:
				{
				State = 70; checarEtiq();
				State = 71; checarRsub();
				State = 72; updateCPInst();
				State = 73; updateLine();
				State = 74; Match(ENTER);
				}
				break;

			case 3:
				{
				State = 76; checarEtiq();
				State = 77; checarDirec();
				State = 78; checarOp();
				State = 79; casoDirec();
				State = 80; updateLine();
				State = 81; Match(ENTER);
				}
				break;

			case 4:
				{
				State = 83; checarEtiq();
				State = 84; checarByte();
				State = 85; checarOpbyte();
				State = 86; updateCPByte();
				State = 87; updateLine();
				State = 88; Match(ENTER);
				}
				break;
			}
			i++;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarINITContext : ParserRuleContext {
		public IToken _INIT;
		public ITerminalNode INIT() { return GetToken(SICParser.INIT, 0); }
		public ChecarINITContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarINIT; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarINIT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarINIT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarINIT(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarINITContext checarINIT() {
		ChecarINITContext _localctx = new ChecarINITContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_checarINIT);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; _localctx._INIT = Match(INIT);
			linea+= (_localctx._INIT!=null?_localctx._INIT.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarACABAContext : ParserRuleContext {
		public IToken _ACABA;
		public ITerminalNode ACABA() { return GetToken(SICParser.ACABA, 0); }
		public ChecarACABAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarACABA; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarACABA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarACABA(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarACABA(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarACABAContext checarACABA() {
		ChecarACABAContext _localctx = new ChecarACABAContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_checarACABA);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; _localctx._ACABA = Match(ACABA);
			linea+= (_localctx._ACABA!=null?_localctx._ACABA.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpbyteContext : ParserRuleContext {
		public IToken _OPERANDBYTE;
		public ITerminalNode OPERANDBYTE() { return GetToken(SICParser.OPERANDBYTE, 0); }
		public ChecarOpbyteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOpbyte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOpbyte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOpbyte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOpbyte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpbyteContext checarOpbyte() {
		ChecarOpbyteContext _localctx = new ChecarOpbyteContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_checarOpbyte);
		int _la;
		try {
			State = 104;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case DIRECTIVA:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case QUOTE:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDBYTE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error OPBYTE en la linea: " + i);}
				}
				break;
			case OPERANDBYTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; _localctx._OPERANDBYTE = Match(OPERANDBYTE);
				linea+= (_localctx._OPERANDBYTE!=null?_localctx._OPERANDBYTE.Text:null); valor = (_localctx._OPERANDBYTE!=null?_localctx._OPERANDBYTE.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarByteContext : ParserRuleContext {
		public IToken _DIRBYTE;
		public ITerminalNode DIRBYTE() { return GetToken(SICParser.DIRBYTE, 0); }
		public ChecarByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarByte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarByteContext checarByte() {
		ChecarByteContext _localctx = new ChecarByteContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_checarByte);
		int _la;
		try {
			State = 111;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case OPERANDBYTE:
			case DIRECTIVA:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case QUOTE:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==DIRBYTE) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error BYTE en la linea: " + i);}
				linea+= (_localctx._DIRBYTE!=null?_localctx._DIRBYTE.Text:null);CP-=3;
				}
				break;
			case DIRBYTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; _localctx._DIRBYTE = Match(DIRBYTE);
				linea+= (_localctx._DIRBYTE!=null?_localctx._DIRBYTE.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarRsubContext : ParserRuleContext {
		public IToken _EXEP;
		public ITerminalNode EXEP() { return GetToken(SICParser.EXEP, 0); }
		public ChecarRsubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarRsub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarRsub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarRsub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarRsub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarRsubContext checarRsub() {
		ChecarRsubContext _localctx = new ChecarRsubContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_checarRsub);
		int _la;
		try {
			State = 118;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case DIRECTIVA:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case QUOTE:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EXEP) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error RSUB en la linea: " + i);}
				linea+= (_localctx._EXEP!=null?_localctx._EXEP.Text:null);
				}
				break;
			case EXEP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; _localctx._EXEP = Match(EXEP);
				linea+= (_localctx._EXEP!=null?_localctx._EXEP.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpSTARTContext : ParserRuleContext {
		public IToken _OPERANDO;
		public IToken _ETIQUETA;
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarOpbyteContext checarOpbyte() {
			return GetRuleContext<ChecarOpbyteContext>(0);
		}
		public ChecarOpSTARTContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOpSTART; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOpSTART(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOpSTART(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOpSTART(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpSTARTContext checarOpSTART() {
		ChecarOpSTARTContext _localctx = new ChecarOpSTARTContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_checarOpSTART);
		int _la;
		try {
			State = 126;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; _localctx._OPERANDO = Match(OPERANDO);

					linea+= (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null);
					if((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='H' || (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='h')
					{
						string final = (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Substring(0, (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length - 1);
						CP = System.Convert.ToInt32(final,16);
					}
					else
					{
						CP =  System.Int32.Parse((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null));
					}
					linea = CP + linea.Substring(1,linea.Length-1);
					
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 124; checarOpbyte();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 125;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDO) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpContext : ParserRuleContext {
		public IToken _OPERANDO;
		public IToken _ETIQUETA;
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarOpbyteContext checarOpbyte() {
			return GetRuleContext<ChecarOpbyteContext>(0);
		}
		public ChecarOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpContext checarOp() {
		ChecarOpContext _localctx = new ChecarOpContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_checarOp);
		int _la;
		try {
			State = 134;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; _localctx._OPERANDO = Match(OPERANDO);

					linea+= (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null);
					if((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='H' || (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='h')
					{
						string final = (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Substring(0, (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length - 1);
						OP = System.Convert.ToInt32(final,16);
					}
					else
					{
						OP =  System.Int32.Parse((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null));
					}
					
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132; checarOpbyte();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDO) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarOpENDContext : ParserRuleContext {
		public IToken _OPERANDO;
		public IToken _ETIQUETA;
		public ITerminalNode OPERANDO() { return GetToken(SICParser.OPERANDO, 0); }
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarOpENDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarOpEND; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarOpEND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarOpEND(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarOpEND(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarOpENDContext checarOpEND() {
		ChecarOpENDContext _localctx = new ChecarOpENDContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_checarOpEND);
		int _la;
		try {
			State = 141;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; _localctx._OPERANDO = Match(OPERANDO);

					linea+= (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null);
					if((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='H' || (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null)[(_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length-1]=='h')
					{
						string final = (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Substring(0, (_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null).Length - 1);
						OP = System.Convert.ToInt32(final,16);
					}
					else
					{
						OP =  System.Int32.Parse((_localctx._OPERANDO!=null?_localctx._OPERANDO.Text:null));
					}
					
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==OPERANDO) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarDirecContext : ParserRuleContext {
		public IToken _DIRECTIVA;
		public ChecarByteContext checarByte() {
			return GetRuleContext<ChecarByteContext>(0);
		}
		public ITerminalNode DIRECTIVA() { return GetToken(SICParser.DIRECTIVA, 0); }
		public ChecarDirecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarDirec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarDirec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarDirec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarDirec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarDirecContext checarDirec() {
		ChecarDirecContext _localctx = new ChecarDirecContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_checarDirec);
		int _la;
		try {
			State = 147;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case QUOTE:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==DIRECTIVA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 144; checarByte();
				}
				break;
			case DIRECTIVA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; _localctx._DIRECTIVA = Match(DIRECTIVA);
				linea+= (_localctx._DIRECTIVA!=null?_localctx._DIRECTIVA.Text:null); Direct = (_localctx._DIRECTIVA!=null?_localctx._DIRECTIVA.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasoDirecContext : ParserRuleContext {
		public CasoDirecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casoDirec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterCasoDirec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitCasoDirec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCasoDirec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasoDirecContext casoDirec() {
		CasoDirecContext _localctx = new CasoDirecContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_casoDirec);
		try {
			EnterOuterAlt(_localctx, 1);
			{

			switch(Direct)
				{
					case "WORD\t": CP+=3;
					break;
					case "RESW\t": CP+=OP*3;
					break;
					case "RESB\t": CP+=OP;
					break;
				}
						
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarEtiqContext : ParserRuleContext {
		public IToken _ETIQUETA;
		public ITerminalNode ETIQUETA() { return GetToken(SICParser.ETIQUETA, 0); }
		public ChecarEtiqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarEtiq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarEtiq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarEtiq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarEtiq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarEtiqContext checarEtiq() {
		ChecarEtiqContext _localctx = new ChecarEtiqContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_checarEtiq);
		int _la;
		try {
			State = 155;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case DIRECTIVA:
			case EXEP:
			case INSTRUCCION:
			case OPERANDO:
			case ENTER:
			case QUOTE:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==ETIQUETA) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				using (System.IO.StreamWriter file = new System.IO.StreamWriter(@rutae, true)){ file.WriteLine("Error ETIQUETA en la linea: " + i);}
				}
				break;
			case ETIQUETA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; _localctx._ETIQUETA = Match(ETIQUETA);
				linea+= CP + " "; if((_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null)=="\t" || (_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null)==" "){linea+="u ";}else{linea+=(_localctx._ETIQUETA!=null?_localctx._ETIQUETA.Text:null);}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecarInstruContext : ParserRuleContext {
		public IToken _INSTRUCCION;
		public ChecarDirecContext checarDirec() {
			return GetRuleContext<ChecarDirecContext>(0);
		}
		public ITerminalNode INSTRUCCION() { return GetToken(SICParser.INSTRUCCION, 0); }
		public ChecarInstruContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checarInstru; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterChecarInstru(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitChecarInstru(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecarInstru(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecarInstruContext checarInstru() {
		ChecarInstruContext _localctx = new ChecarInstruContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_checarInstru);
		int _la;
		try {
			State = 161;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INIT:
			case ACABA:
			case DIRBYTE:
			case OPERANDBYTE:
			case DIRECTIVA:
			case EXEP:
			case OPERANDO:
			case ETIQUETA:
			case ENTER:
			case QUOTE:
			case WS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==INSTRUCCION) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 158; checarDirec();
				}
				break;
			case INSTRUCCION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; _localctx._INSTRUCCION = Match(INSTRUCCION);
				linea+=(_localctx._INSTRUCCION!=null?_localctx._INSTRUCCION.Text:null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SICParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; expr();
			State = 164; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateCPInstContext : ParserRuleContext {
		public UpdateCPInstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateCPInst; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterUpdateCPInst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitUpdateCPInst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateCPInst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateCPInstContext updateCPInst() {
		UpdateCPInstContext _localctx = new UpdateCPInstContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_updateCPInst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			CP+=3;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateLineContext : ParserRuleContext {
		public UpdateLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterUpdateLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitUpdateLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateLineContext updateLine() {
		UpdateLineContext _localctx = new UpdateLineContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_updateLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			linea+='\n';
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateCPByteContext : ParserRuleContext {
		public UpdateCPByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateCPByte; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.EnterUpdateCPByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISICListener typedListener = listener as ISICListener;
			if (typedListener != null) typedListener.ExitUpdateCPByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISICVisitor<TResult> typedVisitor = visitor as ISICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateCPByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateCPByteContext updateCPByte() {
		UpdateCPByteContext _localctx = new UpdateCPByteContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_updateCPByte);
		try {
			EnterOuterAlt(_localctx, 1);
			{

				if(valor[0]=='C')
				{
					valor = valor.Substring(2,valor.Length-3);
					CP+=valor.Length;
				}
				else
				{
					valor = valor.Substring(2,valor.Length-3);
					CP+=(int)(valor.Length/2);
				}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xE\xAF\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\a\x2.\n\x2\f\x2\xE\x2\x31\v\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5]\n\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\bk\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5"+
		"\tr\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\ny\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x5\v\x81\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x89\n\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x5\r\x90\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x96\n\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x9E\n\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\xA4\n\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x15\x3\x15\x3\x15\x2\x2\x2\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2\x2\t\x3\x2\x6\x6\x3\x2\x5\x5\x3\x2\b\b\x3\x2\n\n\x3\x2\a"+
		"\a\x3\x2\v\v\x3\x2\t\t\xAC\x2*\x3\x2\x2\x2\x4\x34\x3\x2\x2\x2\x6;\x3\x2"+
		"\x2\x2\b\\\x3\x2\x2\x2\n`\x3\x2\x2\x2\f\x63\x3\x2\x2\x2\xEj\x3\x2\x2\x2"+
		"\x10q\x3\x2\x2\x2\x12x\x3\x2\x2\x2\x14\x80\x3\x2\x2\x2\x16\x88\x3\x2\x2"+
		"\x2\x18\x8F\x3\x2\x2\x2\x1A\x95\x3\x2\x2\x2\x1C\x97\x3\x2\x2\x2\x1E\x9D"+
		"\x3\x2\x2\x2 \xA3\x3\x2\x2\x2\"\xA5\x3\x2\x2\x2$\xA8\x3\x2\x2\x2&\xAA"+
		"\x3\x2\x2\x2(\xAC\x3\x2\x2\x2*+\b\x2\x1\x2+/\x5\x4\x3\x2,.\x5\b\x5\x2"+
		"-,\x3\x2\x2\x2.\x31\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x32"+
		"\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33\x5\x6\x4\x2\x33\x3\x3\x2\x2\x2\x34"+
		"\x35\x5\x1E\x10\x2\x35\x36\x5\n\x6\x2\x36\x37\x5\x14\v\x2\x37\x38\x5&"+
		"\x14\x2\x38\x39\a\f\x2\x2\x39:\b\x3\x1\x2:\x5\x3\x2\x2\x2;<\x5\x1E\x10"+
		"\x2<=\x5\f\a\x2=>\x5\x18\r\x2>?\b\x4\x1\x2?@\b\x4\x1\x2@\a\x3\x2\x2\x2"+
		"\x41\x42\x5\x1E\x10\x2\x42\x43\x5 \x11\x2\x43\x44\x5\x16\f\x2\x44\x45"+
		"\x5$\x13\x2\x45\x46\x5&\x14\x2\x46G\a\f\x2\x2G]\x3\x2\x2\x2HI\x5\x1E\x10"+
		"\x2IJ\x5\x12\n\x2JK\x5$\x13\x2KL\x5&\x14\x2LM\a\f\x2\x2M]\x3\x2\x2\x2"+
		"NO\x5\x1E\x10\x2OP\x5\x1A\xE\x2PQ\x5\x16\f\x2QR\x5\x1C\xF\x2RS\x5&\x14"+
		"\x2ST\a\f\x2\x2T]\x3\x2\x2\x2UV\x5\x1E\x10\x2VW\x5\x10\t\x2WX\x5\xE\b"+
		"\x2XY\x5(\x15\x2YZ\x5&\x14\x2Z[\a\f\x2\x2[]\x3\x2\x2\x2\\\x41\x3\x2\x2"+
		"\x2\\H\x3\x2\x2\x2\\N\x3\x2\x2\x2\\U\x3\x2\x2\x2]^\x3\x2\x2\x2^_\b\x5"+
		"\x1\x2_\t\x3\x2\x2\x2`\x61\a\x3\x2\x2\x61\x62\b\x6\x1\x2\x62\v\x3\x2\x2"+
		"\x2\x63\x64\a\x4\x2\x2\x64\x65\b\a\x1\x2\x65\r\x3\x2\x2\x2\x66g\n\x2\x2"+
		"\x2gk\b\b\x1\x2hi\a\x6\x2\x2ik\b\b\x1\x2j\x66\x3\x2\x2\x2jh\x3\x2\x2\x2"+
		"k\xF\x3\x2\x2\x2lm\n\x3\x2\x2mn\b\t\x1\x2nr\b\t\x1\x2op\a\x5\x2\x2pr\b"+
		"\t\x1\x2ql\x3\x2\x2\x2qo\x3\x2\x2\x2r\x11\x3\x2\x2\x2st\n\x4\x2\x2tu\b"+
		"\n\x1\x2uy\b\n\x1\x2vw\a\b\x2\x2wy\b\n\x1\x2xs\x3\x2\x2\x2xv\x3\x2\x2"+
		"\x2y\x13\x3\x2\x2\x2z{\a\n\x2\x2{\x81\b\v\x1\x2|}\a\v\x2\x2}\x81\b\v\x1"+
		"\x2~\x81\x5\xE\b\x2\x7F\x81\n\x5\x2\x2\x80z\x3\x2\x2\x2\x80|\x3\x2\x2"+
		"\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x15\x3\x2\x2\x2\x82\x83\a"+
		"\n\x2\x2\x83\x89\b\f\x1\x2\x84\x85\a\v\x2\x2\x85\x89\b\f\x1\x2\x86\x89"+
		"\x5\xE\b\x2\x87\x89\n\x5\x2\x2\x88\x82\x3\x2\x2\x2\x88\x84\x3\x2\x2\x2"+
		"\x88\x86\x3\x2\x2\x2\x88\x87\x3\x2\x2\x2\x89\x17\x3\x2\x2\x2\x8A\x8B\a"+
		"\n\x2\x2\x8B\x90\b\r\x1\x2\x8C\x8D\a\v\x2\x2\x8D\x90\b\r\x1\x2\x8E\x90"+
		"\n\x5\x2\x2\x8F\x8A\x3\x2\x2\x2\x8F\x8C\x3\x2\x2\x2\x8F\x8E\x3\x2\x2\x2"+
		"\x90\x19\x3\x2\x2\x2\x91\x92\n\x6\x2\x2\x92\x96\x5\x10\t\x2\x93\x94\a"+
		"\a\x2\x2\x94\x96\b\xE\x1\x2\x95\x91\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96"+
		"\x1B\x3\x2\x2\x2\x97\x98\b\xF\x1\x2\x98\x1D\x3\x2\x2\x2\x99\x9A\n\a\x2"+
		"\x2\x9A\x9E\b\x10\x1\x2\x9B\x9C\a\v\x2\x2\x9C\x9E\b\x10\x1\x2\x9D\x99"+
		"\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\x1F\x3\x2\x2\x2\x9F\xA0\n\b\x2\x2"+
		"\xA0\xA4\x5\x1A\xE\x2\xA1\xA2\a\t\x2\x2\xA2\xA4\b\x11\x1\x2\xA3\x9F\x3"+
		"\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4!\x3\x2\x2\x2\xA5\xA6\x5\b\x5\x2\xA6"+
		"\xA7\a\x2\x2\x3\xA7#\x3\x2\x2\x2\xA8\xA9\b\x13\x1\x2\xA9%\x3\x2\x2\x2"+
		"\xAA\xAB\b\x14\x1\x2\xAB\'\x3\x2\x2\x2\xAC\xAD\b\x15\x1\x2\xAD)\x3\x2"+
		"\x2\x2\r/\\jqx\x80\x88\x8F\x95\x9D\xA3";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Practica03
